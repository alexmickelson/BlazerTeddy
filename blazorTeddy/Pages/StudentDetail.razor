@page "/StudentDetail/{id:int}"

@using TeddyBlazor.Services
@using TeddyBlazor.Models
@using TeddyBlazor.Components
@using TeddyBlazor.ViewModels

@inject IRefreshService refreshService
@inject StudentDetailViewModel vm

<div class="maincanvas">
    <h1>@vm.Student.StudentName</h1>
    <br />
    <h3>Notes:</h3>
    <div class="notes">

        <div class="notes-item1">
            <!-- <h1>Positives</h1> -->
            <div class="jumbotron centered">
                <table style="width: 100%">
                    <tr>
                        <th>Type</th>
                        <th>Content</th>
                        <th>Signed By</th>
                        <th>Date Created</th>
                    </tr>
                @foreach (var note in vm.GetNotes())
                {
                    <tr>
                        <td>@Note.TypeToString(note.NoteType)</td>
                        <td>@note.Content</td>
                        <td>@note.TeacherId</td>
                        <td>@note.DateCreated</td>
                    </tr>
                }
                </table>
            </div>
            <NewNoteComponent student="@vm.Student"></NewNoteComponent>
        </div>
       
    </div>
    <br />
    <h3>Restrictions:</h3>
    <ul class="jumbotron centered">
        @foreach (var restriction in vm.GetRestrictions())
        {
            <li>@restriction</li>
        }
    </ul>

    <input type="number"
           @bind="vm.NewRestrictionId" />
    <button class="btn btn-secondary"
            type="submit"
            @onclick="(() => runAndReloadAsync(async () => await vm.AddRestrictionAsync()))">
        Add Restriction
    </button>
</div>

@code {
    [Parameter]
    public int id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await vm.LoadStudentAsync(id);
    }
    private async Task runAndReloadAsync(Action action)
    {
        await Task.Run(action);
        await vm.LoadStudentAsync(id);
    }



}