@page "/ClassDetail/{classId:int}"

@using TeddyBlazor.Models
@using TeddyBlazor.Services
@using TeddyBlazor.Components
@using TeddyBlazor.Components.ClassDetailComponents
@using TeddyBlazor.ViewModels.ClassDetail

@inject ClassDetailViewModel vm


<AuthorizeView>
    <Authorized>

        <div class="top-row px-4" style="background-color: lightslategray;">
            <h1>@vm.SelectedClass.ClassName</h1>
        </div>

        <div class="jumbotron centered">

            <ClassDetailNavigationComponent SelectTab="@vm.SelectTab"></ClassDetailNavigationComponent>

            <div class="jumbotron centered">
                <div class="@vm.SeatingChartCssClass">
                    <SeatingChartComponent SelectedClass="@vm.SelectedClass">
                    </SeatingChartComponent>
                </div>
                <div class="@vm.CourseCssClass">
                    <CourseListComponent classId="@vm.SelectedClass.ClassId"></CourseListComponent>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="top-row px-4" style="background-color: lightslategray;">
        </div>

        <LoginDisplay2 />
    </NotAuthorized>
</AuthorizeView>





    @code {

        [Parameter]
        public int classId { get; set; }

        protected override void OnInitialized()
        {
            vm.Reload = () => this.StateHasChanged();
            vm.OnInitialized();
        }

        protected override async Task OnInitializedAsync()
        {
            await vm.OnInitializedAsync();
        }

        protected override void OnParametersSet()
        {
            vm.ClassId = classId;
            vm.OnParametersSet();
        }

        protected override async Task OnParametersSetAsync()
        {
            vm.ClassId = classId;
            await vm.OnParametersSetAsync();
        }
    }
