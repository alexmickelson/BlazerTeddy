@using TeddyBlazor.Models
@using TeddyBlazor.Services
@using TeddyBlazor.Components
@using TeddyBlazor.ViewModels.ClassDetail

@inject SeatingChartViewModel vm

<h3 >SeatingChart</h3>
<span>
    <select @bind-value="vm.SelectedStudentId"
            @bind-value:event="oninput">
        <option value="-1"></option>
        @foreach (var student in vm.StudentModels)
        {
            <option value="@student.StudentId">@student.StudentName</option>
        }
    </select>
    <button @onclick="vm.AssignSeat">AssignSeat</button>
</span>
<hr/>
@for(int j = 0; j < vm.ClassRoom.SeatsVertically; j++)
{
    <div class="row"
         style="display: flex; margin-bottom: .3em;">
    @for(int i = 0; i < vm.ClassRoom.SeatsHorizontally; i++)
    {
        <div class="seatingAssignments"
            style="width: @vm.HorizontalFraction%; margin-right: 1%;">
            <a class="nav-link" 
               href="@vm.GetStudentLink(i,j)"
               style="height: 100%;">
                <div class="card"
                     style="width: 100%; height: 100%;">
                    <div class="card-header">
                        @vm.Students[i,j].StudentName 
                    </div>
                    <div class="card-body"
                         style="padding-bottom: 0;">
                        @vm.GetCourse(i,j) <span style="visibility: hidden;">a</span>
                    </div>
                </div>
            </a>
        </div>
    }
    </div>
}

@code {
    [Parameter]
    public ClassModel SelectedClass { get; set; }

    protected override void OnInitialized()
    {
        vm.OnInitialized();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await vm.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        vm.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        vm.SelectedClass = SelectedClass;
        await vm.OnParametersSetAsync();
    }

}