
@using TeddyBlazor.Services
@using TeddyBlazor.Models
@using TeddyBlazor.Components
@using TeddyBlazor.ViewModels

<h3>Notes:</h3>
<div class="notes">

    <div class="notes-item1">
        <!-- <h1>Positives</h1> -->
        <div class="jumbotron centered">
            <table style="width: 100%">
                <tr>
                    <th>Type</th>
                    <th>Content</th>
                    <!-- <th>Signed By</th> -->
                    <th>Date Created</th>
                </tr>
            @foreach (var note in vm.GetNotes())
            {
                <tr>
                    <td>@Note.TypeToString(note.NoteType)</td>
                    <td>@note.Content</td>
                    <!-- <td>@note.TeacherId</td> -->
                    <td>@note.DateCreated</td>
                </tr>
            }
            </table>
        </div>

        <input type="text"
                placeholder="New Note"
                @bind="vm.NewNoteVM.Note.Content" />
        <button class="btn btn-secondary"
                type="submit"
                @onclick="vm.NewNoteVM.AddNote">
            Add Note
        </button>
        <br />
        <input type="checkbox" placeholder="Don't sign" hidden
               @bind-value="vm.NewNoteVM.IsAnonymousNote" 
               @bind-value:event="oninput"/>
               <!-- Dont sign it -->
        <select @bind-value="vm.NewNoteVM.NoteType" 
                @bind-value:event="oninput">
            <option value="0" selected disabled hidden>Note Type</option>
            @foreach (var option in vm.NewNoteVM.GetNoteTypeOptions())
            {
                <option value="@option.Item1">@option.Item2</option>
            }
        </select> 
        <div class="text-danger">@vm.NewNoteVM.errorAlert</div>
    </div>
</div>

@code {
    [Parameter]
    public StudentDetailViewModel vm { get; set; }
    
    protected override void OnInitialized()
    {
        vm.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        await vm.OnInitializedAsync();
    }
    protected override void OnParametersSet()
    {
        vm.OnParametersSet();
    }
    protected override async Task OnParametersSetAsync()
    {
        await vm.OnParametersSetAsync();
    }

}